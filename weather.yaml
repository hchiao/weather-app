---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "weather"
  namespace: "default"
  labels:
    app: "weather"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "weather"
  template:
    metadata:
      labels:
        app: "weather"
    spec:
      serviceAccountName: mypodserviceaccount
      containers:
      - name: "weather-cont"
        env:
        - name: APIKEY
          value: "1997-07-16"
        #- name: APIKEY
          #valueFrom:
            #secretKeyRef:
              #name: foosecret
              #key: pwd
        image: "dfranciswoolies/ciarecruitment-bestapiever:247904"
        ports:
          - containerPort: 80
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: 80
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
          - mountPath: "/var/secrets"
            name: mysecret
      volumes:
      - name: mysecret
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "app-secrets"
---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "weather"
  namespace: "default"
  labels:
    app: "weather"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "weather"
    apiVersion: "apps/v1"
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80
---
apiVersion: v1
kind: Service
metadata:
  name: weather
  namespace: "default"
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
    app: "weather"
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: basic-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "web-static-ip"
    networking.gke.io/managed-certificates: managed-cert
    kubernetes.io/ingress.class: "gce"
spec:
  defaultBackend:
    service:
      name: weather
      port:
        number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: managed-cert
spec:
  domains:
    - "somenametoremember.com"
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: app-secrets
spec:
  provider: gcp
  secretObjects:
  - secretName: foosecret
    type: Opaque
    data:
    - objectName: good1.txt
      key: pwd
  parameters:
    secrets: |
      - resourceName: "projects/gke-hello-world-253604/secrets/testsecret/versions/latest"
        fileName: "good1.txt"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mypodserviceaccount
  namespace: default
  annotations:
    iam.gke.io/gcp-service-account: gke-workload@gke-hello-world-253604.iam.gserviceaccount.com
