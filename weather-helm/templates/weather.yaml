---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "weather"
  namespace: "{{ .Values.namespace }}" 
  labels:
    app: "weather"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "weather"
  template:
    metadata:
      labels:
        app: "weather"
    spec:
      serviceAccountName: "{{ .Values.ServiceAccountName }}"
      containers:
      - name: "weather-cont"
        env:
        # https://secrets-store-csi-driver.sigs.k8s.io/topics/set-as-env-var.html
        - name: APIKEY
          valueFrom:
            secretKeyRef:
              name: apisecret
              key: pwd
        image: "{{ .Values.image }}"
        ports:
          # https://cloud.google.com/kubernetes-engine/docs/concepts/ingress#health_checks
          - containerPort: {{ .Values.container_port }}
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: {{ .Values.container_port }}
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: {{ .Values.container_port }}
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
          - mountPath: "/var/secrets"
            name: weathersecret
      volumes:
      - name: weathersecret
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "app-secrets"
---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "weather"
  namespace: "{{ .Values.namespace }}"
  labels:
    app: "weather"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "weather"
    apiVersion: "apps/v1"
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80
---
apiVersion: v1
kind: Service
metadata:
  name: weather
  namespace: "{{ .Values.namespace }}"
  annotations:
    # https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing#using-pod-readiness-feedback
    # https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg
    # https://github.com/kubernetes/ingress-gce/issues/1463
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: ClusterIP
  selector:
    app: "weather"
  ports:
    - name: http-80
      protocol: TCP
      port: {{ .Values.loadbalancer_port }}
      targetPort: {{ .Values.container_port }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: basic-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "{{ .Values.static_ip_name }}"
    networking.gke.io/managed-certificates: managed-cert
    kubernetes.io/ingress.class: "gce"
spec:
  defaultBackend:
    service:
      name: weather
      port:
        number: {{ .Values.loadbalancer_port }}
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: managed-cert
spec:
  domains:
    - "{{ .Values.domain }}"
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: app-secrets
spec:
  provider: gcp
  secretObjects:
  - secretName: apisecret
    type: Opaque
    data:
    # https://secrets-store-csi-driver.sigs.k8s.io/topics/sync-as-kubernetes-secret.html
    # https://github.com/GoogleCloudPlatform/secrets-store-csi-driver-provider-gcp/issues/37
    - objectName: secret.txt
      key: pwd
  parameters:
    secrets: |
      - resourceName: "{{ .Values.gcp_secert_location }}"
        fileName: secret.txt
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ .Values.ServiceAccountName }}"
  namespace: "{{ .Values.namespace }}"
  annotations:
    iam.gke.io/gcp-service-account: "{{ .Values.gcp_service_account }}"
